#pragma once

#include <stdint.h>

typedef int64_t Int;
typedef double Real;

// Everything below is not a "core" and will should be generated by backend
// instead of being predefined here

#include <stdio.h>
#include <stdlib.h>

typedef struct Any Any;
struct Any {
  enum {
    INT_T,
    REAL_T,
  } tag;

  union {
    Int int_val;
    Real real_val;
  };
};

__attribute__ ((noreturn)) void panic(const char* msg) {
  printf("panic: %s\n", msg);
  exit(1);
}

static inline Any int_to_any(Int x) {
  return (Any){.tag = INT_T, .int_val = x};
}

static inline Any real_to_any(Real x) {
  return (Any){.tag = REAL_T, .real_val = x};
}

static inline Int any_to_int(Any x) {
  switch (x.tag) {
  case INT_T: return x.int_val;
  case REAL_T: return (Int)x.real_val;
  default: panic("any_to_int: invalid argument type");
  }
}

static inline Int real_to_int(Real x) { return (Int)x; }

inline Real any_to_real(Any x) {
  switch (x.tag) {
  case INT_T: return (Real)x.int_val;
  case REAL_T: return x.real_val;
  default: panic("any_to_real: invalid argument type");
  }
}

static inline Real int_to_real(Int x) { return (Real)x; }
