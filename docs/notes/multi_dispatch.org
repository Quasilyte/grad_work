*Fallback* - function variant with _every_ its argument defined without type.
Fallback can not be called directly, even if static types are in
perfect match (because this will prohibit finding a better fit specialization).
Code for calling fallback generated only in "default" clauses of generic
dispatching function.

Both C & Lisp syntaxes below are fictional, pseudo code-like.

Example(0) - Arity=1
#+BEGIN_SRC 
  -- Lisp --

  (fn (f (int x)) x) ;; specialization 1
  (fn (f (real x)) x) ;; specialization 2
  (fn (f x) x) ;; "fallback"

  -- C --

  long f0(long x) { return x; }
  double f1(double x) { return x; }
  any f2(any x) { return x; }

  // Generic dispatcher
  any f(any x) { 
    switch (x.type) {
    case long: return any(f0(long(x)));
    case double: return any(f1(double(x)));
    default: return f2(x); 
    // Note: if no "fallback" defined, panic will be called.
    }
  }
#+END_SRC

Example(1) - Arity=2
#+BEGIN_SRC
  -- Lisp --

  (fn (f (int a b)) b)
  (fn (f (int a) (real b)) b)
  (fn (f (int a) b) b)
  (fn (f (a (real b)) b)
  (fn (f a b) b)

  -- C --

  long f0(long a, long b) { return b; }
  double f1(long a, double b) { return b; }
  any f2(long a, any b) { return b; }
  double f3(any a, double b) { return b; }
  any f4(any a, any b) { return b; }

  any f(any a, any b) {
    switch (a.type) {
    case long:
      switch (b.type) {
        case long: return any(f0(long(a), long(b)));
        case double: return any(f1(long(a), double(a)));
        case any: return f2(long(a), b);
        default: return f4(a, b);
      }
    case any:
      switch (b.type) {
        case double: return any(f3(a, double(b)));
        default: return f4(a, b);
      }
    default: return f4(a, b);
    }
  }
#+END_SRC

Example(2) - Particular cases
#+BEGIN_SRC
  -- Lisp --

  (fn (f (int x)) x) 
  ;; Note: no fallback provided for "f"

  (fn (q x) x)
  ;; Note: only fallback provided for "q"

  -- C --

  long f0(long x) { return x; }

  any f(any x) {
    switch (x.type) {
    case long: return any(f0(long(x)));
    default: panic("...");
    }
  }

  any q0(any x) { return x; }

  any q(any x) {
    return q0(x); // Note: no indirection ever applied.
  }
#+END_SRC

Example(3) - Invocations
#+BEGIN_SRC
  (fn (sum (int a b)) (+ a b))        ;; sum0
  (fn (sum (int a) (real b)) (+ a b)) ;; sum1
  (fn (sum a b) (+ a b))              ;; sum2
   
                   ;; static type | dynamic type
  (var i 10)       ;; int         | n/a
  (var r 10.0)     ;; real        | n/a
  (var (any a) 10) ;; any         | int
  (var (num n) 10) ;; num         | int

  (sum i i) ;; sum0 called statically
  (sum i r) ;; sum1 called statically
  (sum a a) ;; sum0 called dynamically
  (sum n n) ;; sum2 called dynamically

  (sum "1" "2") ;; sum2 called dynamically and failed at run time
  ;; Warning can be generated for (sum "1" "2") call.
  ;; Also, in trivial case like this, we can give an error, because
  ;; a program is guaranteed to never work. 
#+END_SRC
